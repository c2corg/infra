{{- if .Values.ingress.enabled -}}
{{- $fullName := include "microservice.fullname" . -}}
{{- $svcPort := .Values.service.port -}}
{{- if .Capabilities.APIVersions.Has "networking.k8s.io/v1" -}}
apiVersion: networking.k8s.io/v1
{{- else if .Capabilities.APIVersions.Has "networking.k8s.io/v1beta1" -}}
apiVersion: networking.k8s.io/v1beta1
{{- else -}}
apiVersion: extensions/v1beta1
{{- end }}
kind: Ingress
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "microservice.labels" . | nindent 4 }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if .Values.ingress.tls }}
  tls:
    - hosts:
      {{- range .Values.ingress.hosts }}
      - {{ .host | quote }}
      {{- end }}
      secretName: {{ $fullName }}-cert # cert-manager will store the created certificate in this secret.
  {{- end }}
  rules:
    {{- range .Values.ingress.hosts }}
    - host: {{ .host | quote }}
      http:
        paths:
          - path: /
            {{- if $.Capabilities.APIVersions.Has "networking.k8s.io/v1" }}
            pathType: Prefix
            {{- end }}
            backend:
            {{- if $.Capabilities.APIVersions.Has "networking.k8s.io/v1" }}
              service:
                name: {{ $fullName }}
                port:
                  number: {{ $svcPort }}
            {{- else }}
              serviceName: {{ $fullName }}
              servicePort: {{ $svcPort }}
            {{- end -}}
    {{- end }}
  {{- end }}
